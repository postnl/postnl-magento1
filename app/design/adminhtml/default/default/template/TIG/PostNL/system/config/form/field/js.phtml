<?php
/**
 *                  ___________       __            __
 *                  \__    ___/____ _/  |_ _____   |  |
 *                    |    |  /  _ \\   __\\__  \  |  |
 *                    |    | |  |_| ||  |   / __ \_|  |__
 *                    |____|  \____/ |__|  (____  /|____/
 *                                              \/
 *          ___          __                                   __
 *         |   |  ____ _/  |_   ____ _______   ____    ____ _/  |_
 *         |   | /    \\   __\_/ __ \\_  __ \ /    \ _/ __ \\   __\
 *         |   ||   |  \|  |  \  ___/ |  | \/|   |  \\  ___/ |  |
 *         |___||___|  /|__|   \_____>|__|   |___|  / \_____>|__|
 *                  \/                           \/
 *                  ________
 *                 /  _____/_______   ____   __ __ ______
 *                /   \  ___\_  __ \ /  _ \ |  |  \\____ \
 *                \    \_\  \|  | \/|  |_| ||  |  /|  |_| |
 *                 \______  /|__|    \____/ |____/ |   __/
 *                        \/                       |__|
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Creative Commons License.
 * It is available through the world-wide-web at this URL:
 * http://creativecommons.org/licenses/by-nc-nd/3.0/nl/deed.en_US
 * If you are unable to obtain it through the world-wide-web, please send an email
 * to servicedesk@tig.nl so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for your
 * needs please contact servicedesk@tig.nl for more information.
 *
 * @copyright   Copyright (c) Total Internet Group B.V. https://tig.nl/copyright
 * @license     http://creativecommons.org/licenses/by-nc-nd/3.0/nl/deed.en_US
 *
 * @var TIG_PostNL_Block_Adminhtml_System_Config_Js $this
 */
?>
<?php $_helper = $this->helper('postnl'); ?>
<?php $_activateUrl = $this->getUrl('adminhtml/postnlAdminhtml_extensionControl/activate', array('_secure' => true)); ?>
<?php $_validateUrl = $this->getUrl('adminhtml/postnlAdminhtml_config/validateAccount', array('_secure' => true)); ?>
<?php $_website = Mage::app()->getRequest()->getParam('website'); ?>
<?php $_currentWizardStep = $this->getCurrentWizardStep(); ?>
<?php $_saveWizardStepUrl = $this->getSaveWizardStepUrl(); ?>
<?php $_hideNotificationUrl = $this->getHideNotificationUrl(); ?>

<script type="text/javascript">
    //<![CDATA[
    /**
     *
     */
    function openModalConfirm(title, text, callback, url) {
        var confirm = Dialog.confirm(
            text,
            {
                draggable: true,
                resizable: true,
                closable: true,
                className:"magento",
                windowClassName:"popup-window",
                width: 500,
                title: title,
                okLabel: "<?php echo $_helper->__('Uninstall'); ?>",
                cancelLabel: "<?php echo $_helper->__('Cancel'); ?>",
                buttonClass: "myButtonClass",
                id: "myDialogId",
                cancel: function(win) { callback('cancel', url); },
                ok:     function(win) { callback('ok', url); return false; }
            }
        );
    }

    function handleConfirmUninstall(value, url) {
        if (value === 'ok') {
            var uninstallVerify = $('verify_uninstall').value;
            if (uninstallVerify === 'uninstall') {
                window.location.href = url;
                return true;
            }
            alert('<?php echo $this->jsQuoteEscape($_helper->__('You did not enter the correct verification text. Try again.')); ?>');
        }
        console.log('redirect not');
        return false;
    }

    var postnlConfigWizard = new PostnlConfigWizard({});
    document.observe('dom:loaded', function() {
        $('postnl_cif_labels_and_confirming_checkout_extension').observe('change', function() {
            if ($('postnl_cif_labels_and_confirming_checkout_extension').getValue() == 'other') {
                $('postnl_cif_labels_and_confirming_use_postcode_check').checked = false;

                var elementsMap = formElementDependenceController.elementsMap;
                for (var idTo in elementsMap) {
                    if (!elementsMap[idTo]['postnl_cif_labels_and_confirming_use_postcode_check']) {
                        continue;
                    }
                    formElementDependenceController.trackChange(null, idTo, elementsMap[idTo]);
                }

            }
        });

        postnlConfigWizard.render();

        var topMessages = $$('.entry-edit > .module-message');
        topMessages.each(function(element) {
            $('postnl_wizard').insert({
                before : element
            });
        });

        <?php if (!empty($_currentWizardStep)): ?>
            if (window.location.hash.length < 1) {
                var hash = '<?php echo $this->escapeHtml($_currentWizardStep); ?>';
                postnlConfigWizard.toHash(hash);

                if(window.history.pushState) {
                    window.history.pushState(null, null, hash);
                    postnlConfigWizard.toHash();
                } else {
                    window.location.hash = hash;
                }
            }

            var scrollTarget = $('postnl_wizard');
            if (topMessages[0]) {
                scrollTarget = topMessages[0];
            }

            new Effect.Tween(
                null,
                document.viewport.getScrollOffsets().top,
                scrollTarget.cumulativeOffset()[1] - 50,
                {},
                function(p){ scrollTo(document.viewport.getScrollOffsets().left, p.round()); }
            );
        <?php endif; ?>
    });

    var postnlActivationUrl = '<?php echo $_activateUrl; ?>';
    function activatePostNL() {
        $('config_edit_form').action = postnlActivationUrl;
        configForm.submit();
    }

    function validateAccountSettings() {
        var params = {
            customerNumber  : getConfigValue('postnl_cif_customer_number'),
            customerCode    : getConfigValue('postnl_cif_customer_code'),
            locationCode    : getConfigValue('postnl_cif_collection_location'),
            website         : '<?php echo $_website; ?>',
            isTestMode      : getConfigValue('postnl_cif_mode') == '1' ? 'true' : 'false',
            apikey          : getConfigValue('postnl_cif_live_apikey'),
        };

        if (params.isTestMode == 'true') {
            params['apikey'] = getConfigValue('postnl_cif_test_apikey');
            params['customerNumber'] = getConfigValue('postnl_cif_test_customer_number');
            params['customerCode'] = getConfigValue('postnl_cif_test_customer_code');
        }

        new Ajax.Request('<?php echo $_validateUrl; ?>',{
            method: 'post',
            parameters: params,
            onComplete: function(response) {
                response = response.responseText;
                if (response == 'ok') {
                    alert('<?php echo $this->jsQuoteEscape($_helper->__('Account settings have been succesfully validated. Please save this page to keep these settings.')); ?>');
                    return;
                }

                if (response == 'missing_data') {
                    alert('<?php echo $this->jsQuoteEscape($_helper->__('One or more fields are missing. Please fill these fields and try again.')); ?>');
                    return;
                }

                alert('<?php echo $this->jsQuoteEscape($_helper->__('Your account settings are incorrect. Please check all fields and try again. If this error persists, please contact PostNL.')); ?>');
            }
        });
    }

    function getConfigValue(fieldName) {
        var inheritName = fieldName + '_inherit';

        if ($(inheritName) && $(inheritName).checked) {
            return 'inherit';
        }

        return $(fieldName).getValue();
    }

    /**
     * Add packing slip column header validation.
     */
    Validation.add('validate-packing-slip-column-header', '<?php echo $_helper->__('Please use only letters (a-z A-Z), numbers (0-9) or one of the following characters: [( ) , . _ - #] in this field.') ?>', {
        pattern : new RegExp("^[0-9a-zA-Z,.#\(\)-_]*$")
    });

    var postnlWizardSaveAndContinue = function(nextStepRel, currentStepRel) {
        var nextStepHash = '';

        /**
         * If there is a next step, get it's hash.
         */
        if (nextStepRel) {
            var nextStepAnchor = $$('a[rel="' + nextStepRel + '"]')[0];
            if (nextStepAnchor) {
                nextStepHash = nextStepAnchor.getAttribute('href');
            }
        }
        var params = {
            next_step_hash : nextStepHash
        };

        var valid = true;
        var fields = $$('#' + currentStepRel + ' input,#' + currentStepRel + ' select');
        fields.each(
            function(element) {
                if (element.hasClassName('postnl-validate-empty-failed')) {
                    element.addClassName('required-entry');
                }

                if (!Validation.validate(element.id)) {
                    valid = false;
                } else {
                    var advice = $('advice-required-entry-' + element.id);
                    if (advice) {
                        Validation.hideAdvice(element.id, advice);
                    }
                }

                if (element.hasClassName('required-entry')) {
                    element.removeClassName('required-entry');
                }
            }
        );

        if (!valid) {
            return;
        }

        fields.each(
            function(element) {
                params[element.name] = element.getValue();
            }
        );

        new Ajax.Request('<?php echo $_saveWizardStepUrl; ?>', {
            method : 'post',
            parameters : params,
            onSuccess : function(response) {
                var responseText = response.responseText;
                if (responseText == 'success') {
                    /**
                     * If there is no next step, stay on the current step.
                     */
                    if (!nextStepRel) {
                        nextStepRel = currentStepRel;
                    }

                    window.location.hash = nextStepHash;

                    /**
                     * Go to the next step.
                     */
                    postnlConfigWizard.toStep(nextStepRel);

                    /**
                     * Add a success message.
                     */
                    var successMessageText = Translator.translate('The previous step has been saved successfully!');
                    if (nextStepRel == currentStepRel) {
                        successMessageText = Translator.translate('This step has been saved successfully!');
                    }

                    var successMessage = new Element('div', {
                        'class' : 'wizard-success'
                    }).update(successMessageText);

                    $(nextStepRel).insert({
                        top:successMessage
                    });

                    /**
                     * Have the message fade away after 3 seconds.
                     */
                    setTimeout(function() {
                        successMessage.fade();
                    }, 3000);

                    /**
                     * Scroll to the top of the wizard.
                     */
                    new Effect.Tween(
                        null,
                        document.viewport.getScrollOffsets().top,
                        $('postnl_wizard').cumulativeOffset()[1] - 50,
                        {},
                        function(p){ scrollTo(document.viewport.getScrollOffsets().left, p.round()); }
                    );

                    return;
                }

                if (responseText == 'redirect') {
                    window.location.href = '<?php echo $this->getUrl(''); ?>';

                    return;
                }

                if (responseText == 'refresh') {
                    /**
                     * Change the hash to the next wizard pane. After the page reloads this will be shown.
                     */
                    window.location.hash = nextStepHash;

                    window.location.reload(true);

                    return;
                }

                /**
                 * If something went wrong, submit the entire config form as a fallback.
                 */
                configForm.submit();
            }
        });

        return false;
    };

    Fieldset.toggleCollapse = function(containerId, saveThroughAjax) {
        /**
         * Close all open fieldsets first.
         */
        $$('fieldset .config.collapseable').each(function(element) {
            /**
             * If the fieldset's ID is the same as the selected fieldset, or if the fieldset has nested fieldsets,
             * skip this fieldset.
             */
            if (element.id == containerId || element.select('fieldset .config.collapseable').length) {
                return;
            }

            /**
             * If this fieldset is already hidden, skip it.
             */
            if (element.style.display == 'none') {
                return;
            }

            /**
             * Hide the fieldset.
             */
            if ($(element.id + '-state')) {
                $(element.id + '-state').value = 0;
            }
            $(element.id + '-head').collapsed = 1;

            Fieldset.applyCollapse(element.id);

            /**
             * Save the fieldset's new, collapsed state.
             */
            if (typeof saveThroughAjax != "undefined") {
                Fieldset.saveState(saveThroughAjax, {container: element.id, value: $(element.id + '-state').value});
            }
        });

        /**
         * Continue as usual.
         */
        if ($(containerId + '-state')) {
            collapsed = $(containerId + '-state').value == 1 ? 0 : 1;
        } else {
            collapsed = $(containerId + '-head').collapsed;
        }
        //Cookie.read(this.cookiePrefix + containerId);
        if(collapsed==1 || collapsed===undefined) {
            //Cookie.write(this.cookiePrefix + containerId,  0, 30*24*60*60);
            if ($(containerId + '-state')) {
                $(containerId + '-state').value = 1;
            }
            $(containerId + '-head').collapsed = 0;
        } else {
            //Cookie.clear(this.cookiePrefix + containerId);
            if ($(containerId + '-state')) {
                $(containerId + '-state').value = 0;
            }
            $(containerId + '-head').collapsed = 1;
        }

        Fieldset.applyCollapse(containerId);
        if (typeof saveThroughAjax != "undefined") {
            Fieldset.saveState(saveThroughAjax, {container: containerId, value: $(containerId + '-state').value});
        }
    };

    hideNotification = function(event) {
        event.stop();

        var element = Event.element(event);
        var notificationCode = element.getAttribute('data-notification_code');

        new Ajax.Request('<?php echo $_hideNotificationUrl; ?>', {
            method : 'post',
            parameters : {
                notification_code : notificationCode
            },
            onSuccess : function() {
                element.up('.module-message').fade();
            }
        });
    };

    $$('.postnl-hide-notification-link').invoke('observe', 'click', hideNotification.bindAsEventListener());
    //]]>
</script>
